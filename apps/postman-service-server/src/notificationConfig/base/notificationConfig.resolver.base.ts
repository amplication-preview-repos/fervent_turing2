/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { NotificationConfig } from "./NotificationConfig";
import { NotificationConfigCountArgs } from "./NotificationConfigCountArgs";
import { NotificationConfigFindManyArgs } from "./NotificationConfigFindManyArgs";
import { NotificationConfigFindUniqueArgs } from "./NotificationConfigFindUniqueArgs";
import { CreateNotificationConfigArgs } from "./CreateNotificationConfigArgs";
import { UpdateNotificationConfigArgs } from "./UpdateNotificationConfigArgs";
import { DeleteNotificationConfigArgs } from "./DeleteNotificationConfigArgs";
import { User } from "../../user/base/User";
import { NotificationConfigService } from "../notificationConfig.service";
@graphql.Resolver(() => NotificationConfig)
export class NotificationConfigResolverBase {
  constructor(protected readonly service: NotificationConfigService) {}

  async _notificationConfigsMeta(
    @graphql.Args() args: NotificationConfigCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [NotificationConfig])
  async notificationConfigs(
    @graphql.Args() args: NotificationConfigFindManyArgs
  ): Promise<NotificationConfig[]> {
    return this.service.notificationConfigs(args);
  }

  @graphql.Query(() => NotificationConfig, { nullable: true })
  async notificationConfig(
    @graphql.Args() args: NotificationConfigFindUniqueArgs
  ): Promise<NotificationConfig | null> {
    const result = await this.service.notificationConfig(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => NotificationConfig)
  async createNotificationConfig(
    @graphql.Args() args: CreateNotificationConfigArgs
  ): Promise<NotificationConfig> {
    return await this.service.createNotificationConfig({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => NotificationConfig)
  async updateNotificationConfig(
    @graphql.Args() args: UpdateNotificationConfigArgs
  ): Promise<NotificationConfig | null> {
    try {
      return await this.service.updateNotificationConfig({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => NotificationConfig)
  async deleteNotificationConfig(
    @graphql.Args() args: DeleteNotificationConfigArgs
  ): Promise<NotificationConfig | null> {
    try {
      return await this.service.deleteNotificationConfig(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(
    @graphql.Parent() parent: NotificationConfig
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
