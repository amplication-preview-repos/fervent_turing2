/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  NotificationConfig as PrismaNotificationConfig,
  User as PrismaUser,
} from "@prisma/client";

export class NotificationConfigServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.NotificationConfigCountArgs, "select">
  ): Promise<number> {
    return this.prisma.notificationConfig.count(args);
  }

  async notificationConfigs<T extends Prisma.NotificationConfigFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.NotificationConfigFindManyArgs>
  ): Promise<PrismaNotificationConfig[]> {
    return this.prisma.notificationConfig.findMany<Prisma.NotificationConfigFindManyArgs>(
      args
    );
  }
  async notificationConfig<T extends Prisma.NotificationConfigFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.NotificationConfigFindUniqueArgs>
  ): Promise<PrismaNotificationConfig | null> {
    return this.prisma.notificationConfig.findUnique(args);
  }
  async createNotificationConfig<T extends Prisma.NotificationConfigCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.NotificationConfigCreateArgs>
  ): Promise<PrismaNotificationConfig> {
    return this.prisma.notificationConfig.create<T>(args);
  }
  async updateNotificationConfig<T extends Prisma.NotificationConfigUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.NotificationConfigUpdateArgs>
  ): Promise<PrismaNotificationConfig> {
    return this.prisma.notificationConfig.update<T>(args);
  }
  async deleteNotificationConfig<T extends Prisma.NotificationConfigDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.NotificationConfigDeleteArgs>
  ): Promise<PrismaNotificationConfig> {
    return this.prisma.notificationConfig.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.notificationConfig
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
