/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { NotificationConfigService } from "../notificationConfig.service";
import { NotificationConfigCreateInput } from "./NotificationConfigCreateInput";
import { NotificationConfig } from "./NotificationConfig";
import { NotificationConfigFindManyArgs } from "./NotificationConfigFindManyArgs";
import { NotificationConfigWhereUniqueInput } from "./NotificationConfigWhereUniqueInput";
import { NotificationConfigUpdateInput } from "./NotificationConfigUpdateInput";

export class NotificationConfigControllerBase {
  constructor(protected readonly service: NotificationConfigService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: NotificationConfig })
  async createNotificationConfig(
    @common.Body() data: NotificationConfigCreateInput
  ): Promise<NotificationConfig> {
    return await this.service.createNotificationConfig({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        configDetails: true,
        createdAt: true,
        id: true,
        provider: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [NotificationConfig] })
  @ApiNestedQuery(NotificationConfigFindManyArgs)
  async notificationConfigs(
    @common.Req() request: Request
  ): Promise<NotificationConfig[]> {
    const args = plainToClass(NotificationConfigFindManyArgs, request.query);
    return this.service.notificationConfigs({
      ...args,
      select: {
        configDetails: true,
        createdAt: true,
        id: true,
        provider: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: NotificationConfig })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async notificationConfig(
    @common.Param() params: NotificationConfigWhereUniqueInput
  ): Promise<NotificationConfig | null> {
    const result = await this.service.notificationConfig({
      where: params,
      select: {
        configDetails: true,
        createdAt: true,
        id: true,
        provider: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: NotificationConfig })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateNotificationConfig(
    @common.Param() params: NotificationConfigWhereUniqueInput,
    @common.Body() data: NotificationConfigUpdateInput
  ): Promise<NotificationConfig | null> {
    try {
      return await this.service.updateNotificationConfig({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          configDetails: true,
          createdAt: true,
          id: true,
          provider: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: NotificationConfig })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteNotificationConfig(
    @common.Param() params: NotificationConfigWhereUniqueInput
  ): Promise<NotificationConfig | null> {
    try {
      return await this.service.deleteNotificationConfig({
        where: params,
        select: {
          configDetails: true,
          createdAt: true,
          id: true,
          provider: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
