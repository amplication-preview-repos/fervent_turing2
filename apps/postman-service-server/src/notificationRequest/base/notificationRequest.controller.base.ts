/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { NotificationRequestService } from "../notificationRequest.service";
import { NotificationRequestCreateInput } from "./NotificationRequestCreateInput";
import { NotificationRequest } from "./NotificationRequest";
import { NotificationRequestFindManyArgs } from "./NotificationRequestFindManyArgs";
import { NotificationRequestWhereUniqueInput } from "./NotificationRequestWhereUniqueInput";
import { NotificationRequestUpdateInput } from "./NotificationRequestUpdateInput";

export class NotificationRequestControllerBase {
  constructor(protected readonly service: NotificationRequestService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: NotificationRequest })
  async createNotificationRequest(
    @common.Body() data: NotificationRequestCreateInput
  ): Promise<NotificationRequest> {
    return await this.service.createNotificationRequest({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        message: true,
        notificationType: true,
        recipient: true,
        scheduledTime: true,
        status: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [NotificationRequest] })
  @ApiNestedQuery(NotificationRequestFindManyArgs)
  async notificationRequests(
    @common.Req() request: Request
  ): Promise<NotificationRequest[]> {
    const args = plainToClass(NotificationRequestFindManyArgs, request.query);
    return this.service.notificationRequests({
      ...args,
      select: {
        createdAt: true,
        id: true,
        message: true,
        notificationType: true,
        recipient: true,
        scheduledTime: true,
        status: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: NotificationRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async notificationRequest(
    @common.Param() params: NotificationRequestWhereUniqueInput
  ): Promise<NotificationRequest | null> {
    const result = await this.service.notificationRequest({
      where: params,
      select: {
        createdAt: true,
        id: true,
        message: true,
        notificationType: true,
        recipient: true,
        scheduledTime: true,
        status: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: NotificationRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateNotificationRequest(
    @common.Param() params: NotificationRequestWhereUniqueInput,
    @common.Body() data: NotificationRequestUpdateInput
  ): Promise<NotificationRequest | null> {
    try {
      return await this.service.updateNotificationRequest({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          message: true,
          notificationType: true,
          recipient: true,
          scheduledTime: true,
          status: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: NotificationRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteNotificationRequest(
    @common.Param() params: NotificationRequestWhereUniqueInput
  ): Promise<NotificationRequest | null> {
    try {
      return await this.service.deleteNotificationRequest({
        where: params,
        select: {
          createdAt: true,
          id: true,
          message: true,
          notificationType: true,
          recipient: true,
          scheduledTime: true,
          status: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
