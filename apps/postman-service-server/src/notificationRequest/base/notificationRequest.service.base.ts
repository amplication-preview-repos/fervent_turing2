/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  NotificationRequest as PrismaNotificationRequest,
  User as PrismaUser,
} from "@prisma/client";

export class NotificationRequestServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.NotificationRequestCountArgs, "select">
  ): Promise<number> {
    return this.prisma.notificationRequest.count(args);
  }

  async notificationRequests<T extends Prisma.NotificationRequestFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.NotificationRequestFindManyArgs>
  ): Promise<PrismaNotificationRequest[]> {
    return this.prisma.notificationRequest.findMany<Prisma.NotificationRequestFindManyArgs>(
      args
    );
  }
  async notificationRequest<T extends Prisma.NotificationRequestFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.NotificationRequestFindUniqueArgs>
  ): Promise<PrismaNotificationRequest | null> {
    return this.prisma.notificationRequest.findUnique(args);
  }
  async createNotificationRequest<
    T extends Prisma.NotificationRequestCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.NotificationRequestCreateArgs>
  ): Promise<PrismaNotificationRequest> {
    return this.prisma.notificationRequest.create<T>(args);
  }
  async updateNotificationRequest<
    T extends Prisma.NotificationRequestUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.NotificationRequestUpdateArgs>
  ): Promise<PrismaNotificationRequest> {
    return this.prisma.notificationRequest.update<T>(args);
  }
  async deleteNotificationRequest<
    T extends Prisma.NotificationRequestDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.NotificationRequestDeleteArgs>
  ): Promise<PrismaNotificationRequest> {
    return this.prisma.notificationRequest.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.notificationRequest
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
