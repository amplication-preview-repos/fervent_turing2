/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { NotificationRequest } from "./NotificationRequest";
import { NotificationRequestCountArgs } from "./NotificationRequestCountArgs";
import { NotificationRequestFindManyArgs } from "./NotificationRequestFindManyArgs";
import { NotificationRequestFindUniqueArgs } from "./NotificationRequestFindUniqueArgs";
import { CreateNotificationRequestArgs } from "./CreateNotificationRequestArgs";
import { UpdateNotificationRequestArgs } from "./UpdateNotificationRequestArgs";
import { DeleteNotificationRequestArgs } from "./DeleteNotificationRequestArgs";
import { User } from "../../user/base/User";
import { NotificationRequestService } from "../notificationRequest.service";
@graphql.Resolver(() => NotificationRequest)
export class NotificationRequestResolverBase {
  constructor(protected readonly service: NotificationRequestService) {}

  async _notificationRequestsMeta(
    @graphql.Args() args: NotificationRequestCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [NotificationRequest])
  async notificationRequests(
    @graphql.Args() args: NotificationRequestFindManyArgs
  ): Promise<NotificationRequest[]> {
    return this.service.notificationRequests(args);
  }

  @graphql.Query(() => NotificationRequest, { nullable: true })
  async notificationRequest(
    @graphql.Args() args: NotificationRequestFindUniqueArgs
  ): Promise<NotificationRequest | null> {
    const result = await this.service.notificationRequest(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => NotificationRequest)
  async createNotificationRequest(
    @graphql.Args() args: CreateNotificationRequestArgs
  ): Promise<NotificationRequest> {
    return await this.service.createNotificationRequest({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => NotificationRequest)
  async updateNotificationRequest(
    @graphql.Args() args: UpdateNotificationRequestArgs
  ): Promise<NotificationRequest | null> {
    try {
      return await this.service.updateNotificationRequest({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => NotificationRequest)
  async deleteNotificationRequest(
    @graphql.Args() args: DeleteNotificationRequestArgs
  ): Promise<NotificationRequest | null> {
    try {
      return await this.service.deleteNotificationRequest(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(
    @graphql.Parent() parent: NotificationRequest
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
